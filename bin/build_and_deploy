#!/usr/bin/env bash

set -o errexit

cd $(dirname %0)

# Should probably make these configurable or source them from the project...
DEPLOY_HOST="hollow-twilight-ocean.stelfox.net"
DEPLOY_BASE_FOLDER="containers"

SERVICE_NAME="${1:-web-app-template}"
SERVICE_PORT="${2:-3000}"
SERVICE_ARGUMENTS="--port ${SERVICE_PORT}"
SERVICE_FEATURES="postgres,sqlite"

# Everything beyond this point isn't expected to be changed between services

REPOSITORY_HOST="repo.stelfox.net"
NAMESPACE="sstelfox"
IMAGE="${SERVICE_NAME}"

DEPLOY_IMAGE_ARCHIVE="${DEPLOY_BASE_FOLDER}/library"
DEPLOY_ENV="${DEPLOY_BASE_FOLDER}/env"
DEPLOY_LOGS="${DEPLOY_BASE_FOLDER}/logs"
DEPLOY_PERSISTENT_DATA="${DEPLOY_BASE_FOLDER}/data"
DEPLOY_SERVICE_DIRECTORY="${DEPLOY_BASE_FOLDER}/services"
DEPLOY_STATE="${DEPLOY_BASE_FOLDER}/state"

COMMIT_ID="$(git describe --always --dirty --long --tags)"
# Use the latest commit timestamp, will cause collisions with dirty branches but that's fine
TIMESTAMP="$(git show -s --date=format:'%Y%m%d-%H%M%S' --format=%cd)"

IMAGE_BASE_NAME="${NAMESPACE}_${IMAGE}_${TIMESTAMP}_${COMMIT_ID}"
FULL_IMAGE_NAME="${REPOSITORY_HOST}/${NAMESPACE}/${IMAGE}:${COMMIT_ID}"

TMP_IMAGE="$(mktemp /tmp/${SERVICE_NAME}.XXXXX.tar)"

# Create the actual container
podman build -t ${FULL_IMAGE_NAME} \
  --build-arg CI_BUILD_REF=${COMMIT_ID} \
  --build-arg FEATURES=${SERVICE_FEATURES} \
  --build-arg SERVICE_NAME=${SERVICE_NAME} .

podman save -o ${TMP_IMAGE} ${FULL_IMAGE_NAME} &>/dev/null

echo '==> Image successfully built and exported'

TMP_SERVICE="$(mktemp /tmp/${SERVICE_NAME}.XXXXX.service)"
VERSIONED_SVC_NAME="${SERVICE_NAME}-${TIMESTAMP}-${COMMIT_ID}"

cat << EOF > ${TMP_SERVICE}
[Unit]
Description=${SERVICE_NAME}
After=network-online.target
Wants=network-online.target

[Service]
Type=forking
Restart=on-failure
TimeoutStopSec=35
ExecStartPre=rm -f %t/%n-pid %t/%n-cid
ExecStartPre=podman load --input \${HOME}/${DEPLOY_IMAGE_ARCHIVE}/${IMAGE_BASE_NAME}.tar
ExecStart=podman run -d --name ${SERVICE_NAME} --read-only --replace --restart=on-failure:3 --env-file \${HOME}/${DEPLOY_ENV}/${SERVICE_NAME} --mount type=bind,src=\${HOME}/${DEPLOY_PERSISTENT_DATA}/${SERVICE_NAME},dst=/data --userns keep-id:uid=65532,gid=65532 --network slirp4netns:allow_host_loopback=true --log-driver=k8s-file --log-opt max-size=128kb,path=\${HOME}/${DEPLOY_LOGS}/${SERVICE_NAME}/latest.log --hostname ${SERVICE_NAME}.svc.${DEPLOY_HOST} --publish [::1]:${SERVICE_PORT}:${SERVICE_PORT}/tcp --conmon-pidfile %t/%n-pid --cidfile %t/%n-cid ${FULL_IMAGE_NAME} ${SERVICE_ARGUMENTS}
# We match the k8s container behavior of 30 seconds to kill
ExecStop=podman stop -t 30 --cidfile %t/%n-cid
PIDFile=%t/%n-pid

[Install]
WantedBy=default.target
EOF
echo '==> Service definition successfully generated'

# Transfer the container archive to the remote host
ssh ${DEPLOY_HOST} "mkdir -p \${HOME}/${DEPLOY_IMAGE_ARCHIVE} \${HOME}/${DEPLOY_SERVICE_DIRECTORY}/${SERVICE_NAME}"
scp -O ${TMP_IMAGE} ${DEPLOY_HOST}:${DEPLOY_IMAGE_ARCHIVE}/${IMAGE_BASE_NAME}.tar
scp -O ${TMP_SERVICE} ${DEPLOY_HOST}:${DEPLOY_SERVICE_DIRECTORY}/${SERVICE_NAME}/${VERSIONED_SVC_NAME}.service
rm -f ${TMP_IMAGE} ${TMP_SERVICE}

echo '==> Transferred new version to service host'

ssh -T ${DEPLOY_HOST} <<EOS
nohup sh -c "\
  set -o errexit

  mkdir -p ${DEPLOY_ENV} ${DEPLOY_STATE} ${DEPLOY_LOGS}/${SERVICE_NAME} ${DEPLOY_PERSISTENT_DATA}/${SERVICE_NAME}
  touch ${DEPLOY_ENV}/${SERVICE_NAME}
  chmod -R u=rwX,g=,o= ${DEPLOY_ENV}/${SERVICE_NAME} ${DEPLOY_PERSISTENT_DATA}/${SERVICE_NAME}

  echo '##> Overwriting current version with new service data...'
  mkdir -p "\${HOME}/.config/systemd/user"

  # todo: can I turn this into a symlink? is it worth it?
  cp -f "${DEPLOY_SERVICE_DIRECTORY}/${SERVICE_NAME}/${VERSIONED_SVC_NAME}.service" "\${HOME}/.config/systemd/user/${SERVICE_NAME}.service"
  systemctl --user daemon-reload

  if systemctl --user is-enabled --quiet ${SERVICE_NAME}.service; then
    echo '##> Service is enabled lets meddle...'

    if systemctl --user is-active --quiet ${SERVICE_NAME}.service; then
      echo '##> Service is running, attempting a restart...'

      if ! systemctl --user restart ${SERVICE_NAME}.service &>/dev/null; then
        echo '##> Service failed to start...'

        if [ -L "${DEPLOY_STATE}/${SERVICE_NAME}.service" ]; then
          echo '##> Previous version available, attempting to revert...'

          cp -Lf "${DEPLOY_STATE}/${SERVICE_NAME}.service" "\${HOME}/.config/systemd/user/${SERVICE_NAME}.service"

          systemctl --user daemon-reload
          systemctl --user restart ${SERVICE_NAME}.service

          echo '##> Reverted successfully'
        else
          echo '##> No recovery version available'
        fi

        echo '##> Deploy failed'

        exit 1
      fi

      #if ! curl -fqs http://127.0.0.1:${SERVICE_PORT}/_status/healthz >/dev/null; then
      #  echo '##> Service failed to become healthy...'

      #  if [ -L "${DEPLOY_STATE}/${SERVICE_NAME}.service" ]; then
      #    echo '##> Previous version available, attempting to revert...'

      #    cp -Lf "${DEPLOY_STATE}/${SERVICE_NAME}.service" "\${HOME}/.config/systemd/user/${SERVICE_NAME}.service"

      #    systemctl --user daemon-reload
      #    systemctl --user restart ${SERVICE_NAME}.service

      #    echo '##> Reverted successfully'
      #  else
      #    echo '##> No recovery version available'
      #  fi

      #  echo '##> Deploy failed'

      #  exit 2
      #fi

      systemctl --user enable ${SERVICE_NAME}.service

      echo '##> Service appears to be healthy'
    else
      echo '##> Attempting to start failed service...'
      systemctl --user start ${SERVICE_NAME}.service &>/dev/null
      echo '##> Service successfully started'
    fi

    echo '##> Marking the new version as the "current" version'

    if [ -L "${DEPLOY_STATE}/${SERVICE_NAME}.service" ]; then
      mv "${DEPLOY_STATE}/${SERVICE_NAME}.service" "${DEPLOY_STATE}/${SERVICE_NAME}.service.last"
    fi

    ln -frs "${DEPLOY_SERVICE_DIRECTORY}/${SERVICE_NAME}/${VERSIONED_SVC_NAME}.service" "${DEPLOY_STATE}/${SERVICE_NAME}.service"

    echo '##> Cleaning up old images...'
    podman image prune -f
  else
    echo '##> Service isnt enabled not starting...'
  fi
"
EOS
echo '==> Deployed'

# systemctl --user start web-app-template.service
# ln -s "$SERVER_PATH/versions/$REMOTE_FILENAME" "$SERVER_PATH/$BINARY_NAME"

# Repo setup:
#
# * Create cloudflare records (just cname between the domain and deploy host)
# * mkdir -p /srv/http/stelfox.net/repo
# * sudo certbot certonly --webroot -w /srv/http/challenges -d repo.stelfox.net
# * Create nginx configuration at /etc/nginx/conf.d/stelfox.net/repo.conf:
#
#```conf
#server {
#  listen 80;
#  listen [::]:80;
#
#  listen 443 ssl http2;
#  listen [::]:443 ssl http2;
#
#  server_name repo.stelfox.net;
#  root /srv/http/stelfox.net/repo;
#
#  include /etc/nginx/conf.d/common/_ssl_settings.conf;
#
#  ssl_certificate /etc/letsencrypt/live/repo.stelfox.net/fullchain.pem;
#  ssl_certificate_key /etc/letsencrypt/live/repo.stelfox.net/privkey.pem;
#
#  error_page 404 /404.html;
#
#  include /etc/nginx/conf.d/common/_lets_encrypt_challenges.conf;
#
#  location / {
#    try_files $uri $uri/index.html =404;
#  }
#}
#```

#LOCAL_CACHE_MAX=5
#ARCHIVE_MAX=15

# On the remote system:
# ```sh
# podman load < ${REMOTE_IMAGE_ARCHIVE}/${IMAGE_BASE_NAME}.tar
#
# # This doesn't work.. json format is wrong
# for image in $(podman images $NAMESPACE/$IMAGE --format json | jq -r .RepoTags[0] | tail -n +\$((LOCAL_CACHE_MAX+1))\`; do
#   podman rmi $image
# done
#
# ls -ltr ${REMOTE_IMAGE_ARCHIVE}/${NAMESPACE}_${IMAGE}*.tar | head -n -${ARCHIVE_MAX} | xargs --no-run-if-empty rm
# ```

# I'm going to use systemd user units to manage podman instances in the user
# namespace but hosting on the host itself using configurable ports.
#
# To make sure the processes run after my SSH session logout I need to enable
# linger on my user by running the following command as root:
#
# ```
# loginctl enable-linger sstelfox
# ```
#
# Sample user systemd instance:
#
# ```
# ~/.config/systemd/user/mpd.service
# ```
#
# ```
# skopeo copy docker://library/postgres:alpine docker-archive:containers/docker-library_postgres_$(date +%Y%m%d%H%M%S)_alpine.tar
# ```
#
# Seems like this isn't enough to serve things statically, its possible and I found
# a script that is doing it... Probably can do better...
#
# * https://github.com/NicolasT/static-container-registry
# * https://github.com/NicolasT/static-container-registry/blob/master/static-container-registry.py
#
# Generate podman container definitions:
#
# ```
# podman pod create --name=${SERVICE} -h web-app-template.service.stelfox.net --security-opt=label=disable --network=pasta:-T,${SERVICE_PORT}
# podman create --pod=web-app-template --name=db-postgres -e POSTGRES_PASSWORD=test_password -t repo.stelfox.net/library/postgres:alpine
# podman create --pod=web-app-template --name=api-http -e POSTGRES_PASSWORD=test_password -t repo.stelfox.net/sstelfox/web-app-template:latest
#
# mkdir -p configs
# cd configs
#
#
# cp * $HOME/config/systemd/user
# systemctl --user daemon-reload
# systemctl --user start web-app-template.service
# ```
#
#
# Deploy script:
#
#!/usr/bin/env bash

#set -e
#cd $(dirname $0)
#
#if [ "$#" -ne 2 ]; then
#	echo "usage: $0 user@server-address /path/to/remote/directory/"
#	exit 1
#fi
#
#SERVER_SSH=$1
#SERVER_PATH=$2
#BINARY_NAME="example"
#SERVER_RESTART_COMMAND="systemctl restart $BINARY_NAME"
#
#./build.sh
#
#OUTFILE="./target/x86_64-unknown-linux-musl/release/$BINARY_NAME"
#COMMIT_HASH=$(git rev-parse HEAD)
#BUILD_TIMESTAMP=$(TZ=UTC date -u +"%s")
#FILE_HASH=$(b2sum $OUTFILE | cut -f1 -d' ')
#REMOTE_FILENAME="$BINARY_NAME-$BUILD_TIMESTAMP-$COMMIT_HASH-$FILE_HASH"
#
#ssh $SERVER_SSH "mkdir -p $SERVER_PATH/versions/"
#scp "$OUTFILE" "$SERVER_SSH:$SERVER_PATH/versions/$REMOTE_FILENAME"
#ssh -q -T $SERVER_SSH <<EOL
#	nohup sh -c "\
#	rm "$SERVER_PATH/$BINARY_NAME" && \
#	ln -s "$SERVER_PATH/versions/$REMOTE_FILENAME" "$SERVER_PATH/$BINARY_NAME" && \
#	$SERVER_RESTART_COMMAND"
#EOL
